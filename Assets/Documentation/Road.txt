Road.txt

Documentation for Road.cs

Road Class Description: Road is used for controlling the behavior of the road game object. Most of the 
                        game objects in the development environment are governed by this class, since most
                        of them are connected to the road in some way. This makes Road one of the program's
                        largest and most complex classes.

A. Libraries:
    1. System.Collections.
    2. System.Collections.Generic.
    3. UnityEngine.

B. Class Fields:
    1. MAX_LANES:
        a. Type: private const int.
        b. Serialized: yes.
        c. Description: a variable storing the maximum amount of lanes that
           the road is allowed to contain at any one time.
        d. Usage: primarily used for preventing the road from containing too many lanes.

    2. MIN_LANES:
        a. Type: private const int.
        b. Serialized: yes.
        c. Description: a variable storing the minimum amount of lanes that 
           the road is allowed to contain at any one time.
        d. Usage: primarily used for preventing the road from ever having too few lanes
           (usually it's fine as long as the road has at least 1 lane, so we use MIN_LANES == 1).
    
    3. numStartingLanes:
        a. Type: private int.
        b. Serialized: yes.
        c. Description: a variable storing the number of lanes that the road starts with.
        d. Usage: only used to help build the starting road.

    4. stripeContainer:
        a. Type: private GameObject.
        b. Serialized: yes.
        c. Description: a reference to the game object that allows stripes to be displayed on lanes.
        d. Usage: primarily used to provide an easy way of accessing the stripeContainer,
                  which contains all stripe types that can be inserted, and by extension, a way
                  of easily switching between stripe types.

    5. buildingsReference:
        a. Type: private GameObject.
        b. Serialized: yes.
        c. Description: a reference to the object containing Buildings.cs, which
                        governs the behavior of buildings.
        d. Usage: used to access Buildings.cs, which can be used to change the properties of the buildings
                  in the development environment.

    6. fogController:
        a. Type: private GameObject.
        b. Serialized: yes.
        c. Description: a reference to the object containing FogControl.cs, which governs
                        the behavior of fog.
        d. Usage: used to access FogControl.cs, which can be used to alter the properties of fog.

    7. lights:
        a. Type: private GameObject.
        b. Serialized: yes.
        c. Description: a reference to the lights object.
        d. Usage: primarily used for accessing the position and scale of the lights.
    
    8. roadLanes:
        a. Type: private LinkedList<GameObject> (a linked list of gameobjects).
        b. Serialized: attempted, but Unity cannot serialize it.
        c. Description: a variable storing references to all of the lane game objects that the road
           currently contains.
        d. Usage: primarily used for storing lanes so they can be easily accessed from road.cs;
                  since all of the lanes are stored in a linked list it is easier to edit 
                  all of the values within individual lanes from road.cs.

    9. laneTypes:
        a. Type: private array of GameObjects.
        b. Serialized: yes.
        c. Description: an array containing all of the lane prefabs available to the user
        d. Usage: used as an alternate method for Resources.Load(), since we could never
           quite get that command to work; gives road.cs a quick and easy way to instantiate
           lane prefabs into the development environment.

C. Public Methods:

    1. Start():
        a. Type: Unity specific void function. 
        b. Parameters: none.
        c. Variables: none.
        d. Description: starts the LateStart() coroutine and assigns buildings reference.
        e. Usage: in our case, start is used to build the starting road and environment.
    
    2. LateStart():
        a. Type: IEnumerator (Coroutine).
        b. Parameters: none.
        c. Variables: 
            i. currLane, a GameObject used for storing the current rightmost lane in the road
        c. Description: calls WaitForEndOfFrame() to cause delay; initializes roadLanes;
                        initializes currLane as a null; uses a for loop to insert the desired number
                        of starting lanes into the road, uses insertLane() to do so and continuously assigns 
                        currLane as the rightmost lane in the road, always inserts on the right and always
                        inserts a vehicle lane; finally, switches the outer lanes to shoulders by calling setLaneType()
                        twice.
        d. Usage: used to delay the assignment of the buildingsReference so that a 
                  null reference exception is not thrown.
    
    3. GetRendererBounds():
        a. Type: public Bounds.
        b. Parameters: none.
        c. Variables:
            i. renderers, an array of Renderers containing the renderers of road's children.
            ii. bounds, a Bounds storing the road's bounds.
        d. Description: retrieves the bounds of the road game object (includes children); 
                        if there are no children in the road it simply returns a new Bounds;
                        if there are children it encapsulates each of the children's renderers in 
                        a Bounds and returns it.
        e. Usage: used for keeping track of the location of the edge of the road; 
                  necessary so that buildings' positions update properly.

    4. insertLane():
        a. Type: public void.
        b. Parameters: 
            i. currLane, a GameObject storing the lane that we are inserting next to.
            ii. laneType, a GameObject storing the type of lane that we are inserting.
            iii. side, a string storing the side of currLane that we are inserting on.
        c. Variables:
            i. newPosition, a Vector3 used for creating a position for the new lane.
            ii. currLaneNode, a LinkedListNode<GameObject> used for storing the roadLanes 
                node that contains currLane.
            iii. currLaneScript, the BasicLane script that controls the behavior of currLane.
            iv. newLaneScript, the BasicLane script that controls the behavior the lane we are 
                inserting.
            v. currLanePosition, a Vector3 storing the position of currLane.
            vi. currLaneZScale, a float containing the width of currLane.
            vii. newLane, the GameObject instantiated into the development environment that is
                 of type laneType (the type we want to insert).
            viii. newAsphaltTransform, a Transform containing the transform of newLane's asphalt
            ix. newLaneZScale, a float containing the width of the new lane
        d. Description: if laneType is a valid lane type and the road has less lanes
                        than MAX_LANES, insert a lane; set the new lane's position as either the road's
                        position or (if the road isn't empty), set the new lane's position to be half a lane
                        width away from the previous lane; instantiate the new lane; call adjustRoadAroundLane() 
                        to correctly shift the rest of the lanes in the road around the new lane; call setStripes()
                        to place the correct stripes onto the lane.
        e. Usage: used for inserting lanes into the road. 

    5. removeLane():
        a. Type: public void.
        b. Parameters:
            i. targetLane, the lane GameObject that is to be removed. 
        c. Variables:
            i. targetLaneScriptReference, the BasicLane script that controls the behavior of
               the target lane
            ii. targetLaneWidth, a float containing the width of the target lane
            iii. targetLaneNode, a LinkedListNode<GameObject> containing the roadLanes node of targetLane
            iv. leftNeighborScriptReference, the BasicLane script that controls the behavior of 
                targetLane's left neighbor
            v. rightNeighborScriptReference, the BasicLane script that controls the behavior of
               targetLane's right neighbor
        d. Description: stores the width of the target lane; stores the nodes of the left and right
                        neighbors of the target lane; if the neighbors' nodes are not null, creates references
                        to their scripts; destroy both left and right stripe game objects; call adjustRoadAroundLane()
                        to shift the rest of the lanes in the road properly; remove the target lane from roadLanes;
                        destroy the target lane; finally, call resetStripes() to properly adjust the neighbors' 
                        stripes after the removal.
        e. Usage: used to remove lanes from the road. 
    
    6. adjustRoadAroundLane():
        a. Type: public void. 
        b. Parameters: 
            i. currLane, a GameObject storing the lane that the road is being shifted around.
            ii. sizeDifference, a float storing the amount that each lane's position must be adjusted by.
        c. Variables:
            i. foundLane, a boolean that indicates whether all of the lanes to the left of currLane
               have already been adjusted or not.
            ii. laneScript, the BasicLane script that controls the behavior of the lane that is currently 
                being adjusted.
        d. Description: set foundLane to false; loop through roadLanes to adjust each lane;
                        for each lane, obtains the lane's script, then if the current lane is 
                        currLane, sets foundLane to true; while foundLane is false shift the lanes to the 
                        left by sizeDifference using BasicLane.setLanePosition(), afterwards shift them
                        to the right by sizeDifference using BasicLane.setLanePosition(); finally, call updateBuildings()
                        to shift the buildings around the road. 
        e. Usage: used to shift lanes after an insertion, deletion, width change, or anything else
                  that requires lanes to be moved. 
    
    7. setLaneType():
        a. Type: public void.
        b. Parameters: 
            i. targetLane: 